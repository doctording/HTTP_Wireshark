package jdbc;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import Table_bean.*;


public class Table_Boli {
	
	public Table_Boli()
	{
		super();
	}
	
	//依靠最后ID来获取玻璃个数
	public int getlastBoliID()throws Exception 
	{

		String sql = "SELECT * FROM boli order by(boliID) ";
		PreparedStatement pstmt = null;
		DataBaseConnection dbc = new DataBaseConnection();;
		ResultSet rs=null;
		int lastmessid=0;
		
		// 下面是针对数据库的具体操作
		try {
			// 连接数据库
			dbc.DataBase_Connection();
			pstmt = dbc.getConnection().prepareStatement(sql);
			// 进行数据库查询操作
			rs= pstmt.executeQuery();
			// 获取公告的个数
            if (rs.next())
            	lastmessid=rs.getInt(1);
		}
		catch (Exception e)
			{
				throw new Exception("操作出现异常");
			}
		finally {
			// 关闭数据库连接
			rs.close();
			pstmt.close();
			dbc.close();
			}	
		return lastmessid;			
	}
	
	//添加玻璃种类     
	public int insertBoli(String boli_name,float boli_price,float wujin)throws Exception  {
		//注意：要先判断该玻璃名是否已经存在
		String sql = "INSERT INTO boli(boliID,boli_name,boli_price,wujin) VALUES (?,?,?,?)";
		PreparedStatement pstmt = null;
		DataBaseConnection dbc = new DataBaseConnection();
		int insert_count=0;
		int boliID = 0;
				// 下面是针对数据库的具体操作
		try {
		// 连接数据库
		dbc.DataBase_Connection();
		pstmt = dbc.getConnection().prepareStatement(sql);
		pstmt.setInt(1, boliID);
		pstmt.setString(2, boli_name);
		pstmt.setFloat(3,boli_price);
		pstmt.setFloat(4,wujin);
		// 进行数据库插入操作
		insert_count=pstmt.executeUpdate();
		}

		catch (Exception e) {
		throw new Exception("操作出现异常");
		} finally 
		{
		// 关闭数据库连接
		pstmt.close();
		dbc.close();
		}
		return insert_count;		
	}

	
	//获取所有玻璃信息
	public ArrayList findTotalBoli(String pageNo)throws Exception //返回一个ArrayList bolilist
	{
		ArrayList bolilist = new ArrayList();
		String sql = "SELECT * FROM boli order by(boliID)" ;//对数据库的操作语句
		PreparedStatement pstmt = null;
		DataBaseConnection dbc = new DataBaseConnection();;
		ResultSet rs=null;
		
		// 下面是针对数据库的具体操作
		try {
			// 连接数据库
			dbc.DataBase_Connection();
			pstmt = dbc.getConnection().prepareStatement(sql);
			// 进行数据库查询操作
			rs= pstmt.executeQuery();

			// 循环计数器
			int index = 0;
			// 对结果集进行遍历
			while(rs.next())
			{
				// 循环到第index条
				index++;
				// 如果还没有到要显示的第一条记录，则不处理，继续遍历

				// 获取结果集中的信息
				int tmpBoliID=rs.getInt(1);
				
				String tmpBoli_name=rs.getString(2);
				// 进行编码转换
				tmpBoli_name=new String(tmpBoli_name.getBytes("GBK"));
				
				float tmpBoli_price=rs.getFloat(3);
				float tmpWujin=rs.getFloat(4);
				
			
			
				BoliBean boli = new BoliBean();//定义BoliBean的Boli对象
				boli.setBoliID(tmpBoliID);
				boli.setBoli_name(tmpBoli_name);
				boli.setBoli_price(tmpBoli_price);
				boli.setWujin(tmpWujin);
				
				// 把对象添加到集合中
				bolilist.add(boli);
			}
		}
		catch (Exception e)
		{
			throw new Exception("操作出现异常");
		}
		finally {
			// 关闭数据库连接
			rs.close();
			pstmt.close();
			dbc.close();
		}
		return bolilist;//返回bolilist
	}	
	
	
	public boolean hasExist(String boli_name) throws Exception
	{
	boolean find=false;
	// 连接对象
	DataBaseConnection dbc = new DataBaseConnection();;
	dbc.DataBase_Connection();
	// 结果集对象
	ResultSet rs=null;
	// 查询语句
	StringBuffer sql1 = new StringBuffer();
	PreparedStatement pstmt = null;
	sql1.append("select * from boli where boli_name='");
	sql1.append(boli_name);
	sql1.append("'");
	String sql = sql1.toString();
	
	try
	{
		// 连接数据库
		dbc.DataBase_Connection();
		pstmt = dbc.getConnection().prepareStatement(sql);
		// 进行数据库查询操作
		rs= pstmt.executeQuery();
	if(rs.next())
	find = true;
	else
	find = false;
	}catch(Exception e)
	{
	}
	finally
	{
		rs.close();
		pstmt.close();
		dbc.close();
	}
	// 返回查找的结果
	return find;
	}
	
	
	public BoliBean selectBoliByName(String boli_name) throws Exception  {
		
		BoliBean boli = new BoliBean();
		StringBuffer sql1 = new StringBuffer();
		sql1.append("select * from boli where boli_name='");
		sql1.append(boli_name);
		sql1.append("'");
		String sql = sql1.toString();
		PreparedStatement pstmt = null;
		DataBaseConnection dbc = new DataBaseConnection();
		ResultSet rs=null;
		
		try {
			// 连接数据库
			dbc.DataBase_Connection();
			pstmt = dbc.getConnection().prepareStatement(sql);
			// 进行数据库查询操作
			rs= pstmt.executeQuery();
			
			if(rs.next()){
				boli.setBoliID(rs.getInt("BoliID"));
				boli.setBoli_name(rs.getString("Boli_name"));
				boli.setBoli_price(rs.getFloat("Boli_price"));
				boli.setWujin(rs.getFloat("wujin"));
			}
		}
		catch (Exception e) {
				e.printStackTrace();
			}
		finally {
			// 关闭数据库连接
			rs.close();
			pstmt.close();
			dbc.close();	
			}
        return boli;
		
	}

	public Integer getPageCount()throws Exception 
	{
		int pageCount=1;
		String sql = "SELECT * FROM boli ";
		PreparedStatement pstmt = null;
		DataBaseConnection dbc = new DataBaseConnection();;
		ResultSet rs=null;

		
		// 下面是针对数据库的具体操作
		try {
			// 连接数据库
			dbc.DataBase_Connection();
			pstmt = dbc.getConnection().prepareStatement(sql);
			// 进行数据库查询操作
			rs= pstmt.executeQuery();
			// 获取用户的个数
			int count=0;
			while(rs.next()){
				count++;
			}
						
			// 计算总页数
			pageCount = (count-1)/10+1;
			
		} 
		catch (Exception e)
		{
			throw new Exception("操作出现异常");
		}
		finally {
			// 关闭数据库连接
			rs.close();
			pstmt.close();
			dbc.close();
		}
		
		return new Integer(pageCount);
		
	}

	//修改与更新玻璃数据表数据(玻璃名不允许修改)
	public int UpdateBoli(String boli_name,float boli_price,float wujin)throws Exception {
		StringBuffer sql1 = new StringBuffer();
		sql1.append("UPDATE boli SET boli_price='");
		sql1.append(boli_price);
		sql1.append("' and hardware='");
		sql1.append(wujin);
		sql1.append("' WHERE boli_name='");
		sql1.append(boli_name);
		sql1.append("'");
		String sql = sql1.toString();
		PreparedStatement pstmt = null;
		DataBaseConnection dbc = new DataBaseConnection();
		int update_count=0;

		// 下面是针对数据库的具体操作
		try {
			// 连接数据库
			dbc.DataBase_Connection();
			pstmt = dbc.getConnection().prepareStatement(sql);
			// 进行数据库更新操作
			update_count=pstmt.executeUpdate();			
		}
		catch (Exception e)
		{
			throw new Exception("操作出现异常");
		}
		finally
		{
			// 关闭数据库连接
			pstmt.close();
			dbc.close();
		}
		return update_count;
	}	
	
	public int DeleteBoli(String boli_name)throws Exception {

		StringBuffer sql1 = new StringBuffer();
		sql1.append("DELETE from boli where boli_name='");
		sql1.append(boli_name);
		sql1.append("'");
		String sql = sql1.toString();
		PreparedStatement pstmt = null;
		DataBaseConnection dbc = new DataBaseConnection();
		int delete_count=0;

		// 下面是针对数据库的具体操作
		try {
			// 连接数据库
			dbc.DataBase_Connection();
			pstmt = dbc.getConnection().prepareStatement(sql);
			// 进行数据库更新操作
			delete_count=pstmt.executeUpdate();			
		}
		catch (Exception e)
		{
			throw new Exception("操作出现异常");
		}
		finally
		{
			// 关闭数据库连接
			pstmt.close();
			dbc.close();
		}
		return delete_count;
	}	
}
